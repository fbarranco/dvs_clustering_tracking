class update_dvs_msgs_EventArray_d2e726b2040dbc135644f4709c150a10(MessageUpdateRule):
	old_type = "dvs_msgs/EventArray"
	old_full_text = """
# an array of events
Event[] events

================================================================================
MSG: dvs_msgs/Event
# A DVS event
uint16 x
uint16 y
uint64 time
bool polarity
"""

	new_type = "dvs_msgs/EventArray"
	new_full_text = """
# This message contains an array of events
# (0, 0) is at top-left corner of image
#

Header header

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# an array of events
Event[] events

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: dvs_msgs/Event
# A DVS event
uint16 x
uint16 y
time ts
bool polarity
"""

	order = 0
	migrated_types = [
		("Event","Event"),]

	valid = True

	def update(self, old_msg, new_msg):
		#No matching field name in old message
		new_msg.header = self.get_new_class('std_msgs/Header')()
		new_msg.height = 128 #resolution of the DVS
		new_msg.width = 128
		self.migrate_array(old_msg.events, new_msg.events, "dvs_msgs/Event")
class update_dvs_msgs_Event_77331a9e8b243d7e378ead150e50b8ef(MessageUpdateRule):
	old_type = "dvs_msgs/Event"
	old_full_text = """
# A DVS event
uint16 x
uint16 y
uint64 time
bool polarity
"""

	new_type = "dvs_msgs/Event"
	new_full_text = """
# A DVS event
uint16 x
uint16 y
time ts
bool polarity
"""

	order = 0
	migrated_types = []

	valid = True

	def update(self, old_msg, new_msg):
		new_msg.x = old_msg.x
		new_msg.y = old_msg.y
		new_msg.ts.secs = int(old_msg.time/1e6)
		t = old_msg.time - long(new_msg.ts.secs)*1e6
		new_msg.ts.nsecs = t*1e3
		new_msg.polarity = old_msg.polarity
