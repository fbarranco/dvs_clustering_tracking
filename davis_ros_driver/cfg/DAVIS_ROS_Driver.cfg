#!/usr/bin/env python
PACKAGE = "davis_ros_driver"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("streaming_rate", int_t, 0, "integration time (0 is instant sending)", 30, 0, 10000)
gen.add("max_events", int_t, 0, "max. events per packet (0 is no limit)", 0, 0, 100000)

gen.add("aps_enabled", bool_t, 0, "enables APS", True)
gen.add("dvs_enabled", bool_t, 0, "enables DVS", True)
gen.add("imu_enabled", bool_t, 0, "enables IMU", True)

gen.add("exposure", int_t, 0, "exposure (frame exposure time in microseconds)", 5000, 0, 1000000)
gen.add("frame_delay", int_t, 0, "frame_delay (delay between consecutive frames in microseconds)", 0, 0, 1000000)

# DAVIS Biasing
# a bias consists of a coarse 3 bit value and a fine 8 bit value.
# Coarse values are logarithmic and adding one means ~8 times higher current
# fine values are linear and produce the output current range [0, coarse]. This
# means setting a fine value to 32 is equal to decreasing coarse by 1 and
# setting fine to 255.

# if you want only one event per illumination change, use: high PrBp, PrSFBn and
# low DiffBn

def addBias(grp, name, descr, coarse_def, fine_def):
	grp.add(name+"_coarse", int_t, 1, descr+" (coarse, logarithmic)", coarse_def, 0, 7)
	grp.add(name+"_fine", int_t, 1, descr+" (fine, linear)", fine_def, 0, 255)

grp_stage_one = gen.add_group("DAVIS_Biases_Stage_1")
addBias(grp_stage_one, "PrBp",
	"Amplifier in first stage. Limits the speed. Higher=faster and more noise", 2, 58)
addBias(grp_stage_one, "PrSFBp",
	"Source follower: set high to allow higher pixel bandwidth (has no influence if set high enough)", 1, 33)

grp_stage_two = gen.add_group("DAVIS_Biases_Stage_2")
addBias(grp_stage_two, "DiffBn",
	"Amplifier of second stage. Indep of actual illumination level. rebalance ONBn/OFFBn after changing this", 4, 39)
addBias(grp_stage_two, "ONBn",
	"Threshold for ON events (contrast sensitivity). Must be >DiffBn.", 6, 200)
addBias(grp_stage_two, "OFFBn",
	"Threshold for OFF events (contrast sensitivity). Must be <DiffBn.", 4, 0)
addBias(grp_stage_two, "RefrBp",
	"Maximum pixel firing rate (reset time before it can start to detect changes again)", 4, 25)


imu_acc_scale_enum = gen.enum([ gen.const("2g",         int_t, 0, "+/- 2 g"),
                                gen.const("4g",         int_t, 1, "+/- 4 g"),
                                gen.const("8g",         int_t, 2, "+/- 8 g"),
                                gen.const("16g",        int_t, 3, "+/- 16 g")],
                                "Full scale of the accelerometer")

imu_gyro_scale_enum = gen.enum([ gen.const("250degps",  int_t, 0, "+/- 250 deg/s"),
                                 gen.const("500degps",  int_t, 1, "+/- 500 deg/s"),
                                 gen.const("1000degps", int_t, 2, "+/- 1000 deg/s"),
                                 gen.const("2000degps", int_t, 3, "+/- 2000 deg/s")],
                                 "Full scale of the gyroscope")

gen.add("imu_acc_scale", int_t, 0, "Full scale of the accelerometer", 3, 0, 3, edit_method=imu_acc_scale_enum)
gen.add("imu_gyro_scale", int_t, 0, "Full scale of the gyroscope", 3, 0, 3, edit_method=imu_gyro_scale_enum)

exit(gen.generate(PACKAGE, "davis_ros_driver", "DAVIS_ROS_Driver"))
